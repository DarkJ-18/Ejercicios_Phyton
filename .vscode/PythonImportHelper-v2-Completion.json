[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "convertir_a_romano",
        "kind": 2,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "def convertir_a_romano(numero_entero):\n    romanos = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",\n        5: \"V\",\n        6: \"VI\",\n        7: \"VII\",\n        8: \"VIII\",",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "calcular_bonificacion",
        "kind": 2,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "def calcular_bonificacion(monto_venta):\n    if monto_venta <= 1000:\n        bonificacion = 0\n    elif monto_venta <= 5000:\n        bonificacion = 3\n    elif monto_venta <= 20000:\n        bonificacion = 5\n    else:\n        bonificacion = 8\n    return bonificacion",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "calcular_bonificacion",
        "kind": 2,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "def calcular_bonificacion(monto_venta):\n    bonificaciones = {\n        range(0, 1000): 0,\n        range(1000, 5000): 3,\n        range(5000, 20000): 5,\n        range(20000, float('inf')): 8\n    }\n    for rango, bonificacion in bonificaciones.items():\n        if monto_venta in rango:\n            return (bonificacion * monto_venta) / 100",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "obtener_vocal",
        "kind": 2,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "def obtener_vocal(numero):\n    switch = {\n        1: \"A\",\n        2: \"E\",\n        3: \"I\",\n        4: \"O\",\n        5: \"U\"\n    }\n    return switch.get(numero, \"Valor Incorrecto\")\nnumero_entero = int(input(\"Ingrese un número entero del 1 al 5: \"))",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "numero_entero",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "numero_entero = int(input(\"Ingrese un número entero entre 1 y 10: \"))\nequivalente_romano = convertir_a_romano(numero_entero)\nprint(\"El equivalente en romano es:\", equivalente_romano)\n#15.Elabore un algoritmo que permita ingresar el #monto de venta alcanzado por un vendedor durante #el mes, luego de calcular la bonificación que le #corresponde sabiendo:\ndef calcular_bonificacion(monto_venta):\n    if monto_venta <= 1000:\n        bonificacion = 0\n    elif monto_venta <= 5000:\n        bonificacion = 3\n    elif monto_venta <= 20000:",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "equivalente_romano",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "equivalente_romano = convertir_a_romano(numero_entero)\nprint(\"El equivalente en romano es:\", equivalente_romano)\n#15.Elabore un algoritmo que permita ingresar el #monto de venta alcanzado por un vendedor durante #el mes, luego de calcular la bonificación que le #corresponde sabiendo:\ndef calcular_bonificacion(monto_venta):\n    if monto_venta <= 1000:\n        bonificacion = 0\n    elif monto_venta <= 5000:\n        bonificacion = 3\n    elif monto_venta <= 20000:\n        bonificacion = 5",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "monto_venta",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "monto_venta = float(input(\"Ingrese el monto de venta alcanzado por el vendedor durante el mes: \"))\nbonificacion = calcular_bonificacion(monto_venta)\nprint(\"La bonificación correspondiente es:\", bonificacion)\n#------ otra forma con diccionario-------\ndef calcular_bonificacion(monto_venta):\n    bonificaciones = {\n        range(0, 1000): 0,\n        range(1000, 5000): 3,\n        range(5000, 20000): 5,\n        range(20000, float('inf')): 8",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "bonificacion",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "bonificacion = calcular_bonificacion(monto_venta)\nprint(\"La bonificación correspondiente es:\", bonificacion)\n#------ otra forma con diccionario-------\ndef calcular_bonificacion(monto_venta):\n    bonificaciones = {\n        range(0, 1000): 0,\n        range(1000, 5000): 3,\n        range(5000, 20000): 5,\n        range(20000, float('inf')): 8\n    }",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "monto_venta",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "monto_venta = float(input(\"Ingrese el monto de venta alcanzado por el vendedor durante el mes: \"))\ntotal_bonificacion = calcular_bonificacion(monto_venta)\nprint(\"La bonificación correspondiente es:\", total_bonificacion)\n#16. Elabore un algoritmo que solicite un número \n# #entero y muestre un mensaje indicando la vocal \n# #correspondiente, considerando que la vocal A = 1.\ndef obtener_vocal(numero):\n    switch = {\n        1: \"A\",\n        2: \"E\",",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "total_bonificacion",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "total_bonificacion = calcular_bonificacion(monto_venta)\nprint(\"La bonificación correspondiente es:\", total_bonificacion)\n#16. Elabore un algoritmo que solicite un número \n# #entero y muestre un mensaje indicando la vocal \n# #correspondiente, considerando que la vocal A = 1.\ndef obtener_vocal(numero):\n    switch = {\n        1: \"A\",\n        2: \"E\",\n        3: \"I\",",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "numero_entero",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "numero_entero = int(input(\"Ingrese un número entero del 1 al 5: \"))\nvocal_correspondiente = obtener_vocal(numero_entero)\nprint(\"La vocal correspondiente es:\", vocal_correspondiente)\n#17\n# Ejercicio 1: Clasificación de edades.\n# Escribe un programa que reciba una edad como entrada \n# y clasifique a la persona en las siguientes categorías: \n# niño (menos de 11 años), adolescente (12-17 años), \n# adulto (18-64 años) o mayor (65 años o más).\n#Opcional: preadolescente: 11 a 13 y adolescente de 14 a 17",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "vocal_correspondiente",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "vocal_correspondiente = obtener_vocal(numero_entero)\nprint(\"La vocal correspondiente es:\", vocal_correspondiente)\n#17\n# Ejercicio 1: Clasificación de edades.\n# Escribe un programa que reciba una edad como entrada \n# y clasifique a la persona en las siguientes categorías: \n# niño (menos de 11 años), adolescente (12-17 años), \n# adulto (18-64 años) o mayor (65 años o más).\n#Opcional: preadolescente: 11 a 13 y adolescente de 14 a 17\nedad = int(input(\"Ingrese su edad: \"))",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "edad = int(input(\"Ingrese su edad: \"))\ntry:\n    if edad <=11:\n        print(\"Niño\")\n    elif 12<= edad <=17:\n        print(\"Adolescente\")\n    elif 18<=edad <=64:\n        print(\"adulto\")\n    elif edad >=65:\n        print(\"Mayor\")",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "nota",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "nota = int(input(\"Ingrese la nota: \"))\nif nota < 50:\n    print(\"Deficiente \")\nelif 50 <= nota < 65:\n    print(\"Aprobado\")\nelif 65 <= nota < 85:\n    print(\"Notable\")\nelif 85 <= nota <= 100:\n    print(\"Sobresaliente\")\nelse:",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "temp = float (input (\"Introduce la temperatura en grados Celsius: \"))\nif temp < 10:\n    print(\"Frío\")\nelif temp >= 10 and temp <= 20:\n    print(\"Templado\")\nelif temp >= 21 and temp <= 30:\n    print(\"Cálido\")\nelif temp > 30:\n    print(\"Caluroso\")\n#20. Ejercicio 4: Clasificación de IMC.",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "imc",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "imc = float(input(\"Ingrese su IMC: \"))\nif imc < 18.5:\n    print (\"Bajo peso\")\nelif 18.5 <= imc < 25:\n       print(\"Normal\")\nelif 25 <= imc < 30:\n       print(\"Sobrepeso\")\nelif imc >= 30:\n       print(\"Obeso\")\n#Ejercicio 5: Evaluación del viento.",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "velocidad",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "velocidad = float (input (\"Introduce la velocidad del viento en km/h: \"))\nif velocidad < 5:\n    print(\"Viento calmado\")\nelif 5 <= velocidad < 20:\n    print(\"Viento ligero\")\nelif 20 <= velocidad < 40:\n    print(\"Viento moderado\")\nelif velocidad >= 40:\n    print(\"Viento fuerte\")\n#Ejercicio 6: Clasificación de automóviles.",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "velocidad",
        "kind": 5,
        "importPath": "ejercicios",
        "description": "ejercicios",
        "peekOfCode": "velocidad = float(input(\"Introduce la velocidad máxima del automóvil en km/h: \"))\nif velocidad < 140:\n    print(\"Automóvil económico\")\nelif 140 <= velocidad <= 180:\n    print(\"Automóvil estándar\")\nelif 181 <= velocidad <= 220:\n    print(\"Automóvil deportivo\")\nelif velocidad > 220:\n    print(\"Automóvil de alto rendimiento\")\n# Ejercicio 7: Clasificación de alturas.",
        "detail": "ejercicios",
        "documentation": {}
    },
    {
        "label": "verificar_cuil",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def verificar_cuil(año_nacimiento, año_actual):\n    edad = año_actual - año_nacimiento\n    if edad > 17:\n        return \"Debe solicitar su CUIL.\"\n    else:\n        return \"No debe solicitar su CUIL aún.\"\naño_nacimiento = int(input(\"Ingrese su año de nacimiento: \"))\naño_actual = int(input(\"Ingrese el año actual: \"))\nresultado = verificar_cuil(año_nacimiento, año_actual)\nprint(resultado)",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "diferencia_edades",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def diferencia_edades(edad_hermano1, edad_hermano2):\n    if edad_hermano1 > edad_hermano2:\n        print(\"El Primer Hermano es el Mayor por\", edad_hermano1 - edad_hermano2, \"años.\")\n    else:\n        print(\"El Segundo Hermano es el Mayor por\", edad_hermano2 - edad_hermano1, \"años.\")\nedad_hermano1 = int(input(\"Ingrese la edad del Primer Hermano: \"))\nedad_hermano2 = int(input(\"Ingrese la edad del Segundo Hermano: \"))\ndiferencia_edades(edad_hermano1, edad_hermano2)\n#11.\tSe tiene registrado la producción (unidades) #logradas por un operario a lo largo de la semana #(lunes a sábado). Elabore un algoritmo que nos #muestre o nos diga si el operario recibirá #incentivos sabiendo que el promedio de producción #mínima es de 100 unidades.\ndef verificar_incentivos(produccion_semanal):",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "verificar_incentivos",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def verificar_incentivos(produccion_semanal):\n    promedio_produccion = sum(produccion_semanal) / len(produccion_semanal) #para obtener la longitud de un objeto, se usa para contar el número de elementos de una lista\n    if promedio_produccion >= 100:\n        return \"El operario recibirá incentivos.\"\n    else:\n        return \"El operario no recibirá incentivos.\"\nproduccion_semanal = []\nprint(\"Ingrese la producción diaria del operario de lunes a sábado:\")\nfor i in range(6):\n    produccion_diaria = int(input(\"Ingrese la producción del día {}: \".format(i+1)))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "calcular_incentivos",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def calcular_incentivos(produccion_semana):\n    produccion_total = sum(produccion_semana)\n    produccion_promedio = produccion_total / len(produccion_semana)\n    if produccion_promedio >= 100:\n        return \"Recibirá Incentivos\"\n    else:\n        return \"No Recibirá Incentivos\"\nproduccion_lunes = int(input(\"Producción del día Lunes: \"))\nproduccion_martes = int(input(\"Producción del día Martes: \"))\nproduccion_miercoles = int(input(\"Producción del día Miércoles: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "encontrar_mayor",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def encontrar_mayor(n1, n2, n3):\n    if n1 > n2 and n1 > n3:\n        return n1\n    elif n2 > n3:\n        return n2\n    else:\n        return n3\nn1 = int(input(\"Ingrese el primer número entero: \"))\nn2 = int(input(\"Ingrese el segundo número entero: \"))\nn3 = int(input(\"Ingrese el tercer número entero: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "tipo_triangulo",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def tipo_triangulo(lado1, lado2, lado3):\n    if lado1 == lado2 == lado3:\n        return \"Equilátero\"\n    elif lado1 == lado2 or lado1 == lado3 or lado2 == lado3:\n        return \"Isósceles\"\n    else:\n        return \"Escaleno\"\nlado1 = float(input(\"Ingrese la longitud del primer lado del triángulo: \"))\nlado2 = float(input(\"Ingrese la longitud del segundo lado del triángulo: \"))\nlado3 = float(input(\"Ingrese la longitud del tercer lado del triángulo: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "convertir_a_romano",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def convertir_a_romano(numero_entero):\n    romanos = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",\n        5: \"V\",\n        6: \"VI\",\n        7: \"VII\",\n        8: \"VIII\",",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "calcular_bonificacion",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def calcular_bonificacion(monto_venta):\n    if monto_venta <= 1000:\n        bonificacion = 0\n    elif monto_venta <= 5000:\n        bonificacion = 3\n    elif monto_venta <= 20000:\n        bonificacion = 5\n    else:\n        bonificacion = 8\n    return bonificacion",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "calcular_bonificacion",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def calcular_bonificacion(monto_venta):\n    bonificaciones = {\n        range(0, 1000): 0,\n        range(1000, 5000): 3,\n        range(5000, 20000): 5,\n        range(20000, float('inf')): 8\n    }\n    for rango, bonificacion in bonificaciones.items():\n        if monto_venta in rango:\n            return (bonificacion * monto_venta) / 100",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "obtener_vocal",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def obtener_vocal(numero):\n    switch = {\n        1: \"A\",\n        2: \"E\",\n        3: \"I\",\n        4: \"O\",\n        5: \"U\"\n    }\n    return switch.get(numero, \"Valor Incorrecto\")\nnumero_entero = int(input(\"Ingrese un número entero del 1 al 5: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "obtener_vocal",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def obtener_vocal(numero):\n    vocales = {\n        1: \"A\",\n        2: \"E\",\n        3: \"I\",\n        4: \"O\",\n        5: \"U\"\n    }\n    return vocales.get(numero, \"Número fuera de rango\")\nnumero_entero = int(input(\"Ingrese un número entero del 1 al 5: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "obtener_unidades_y_decenas",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def obtener_unidades_y_decenas(numero):\n    unidades = numero % 10\n    decenas = numero // 10\n    return unidades, decenas\ndef es_par(numero):\n    if numero != 0 and numero % 2 == 0:\n        return True\n    else:\n        return False\nnumero_entero = int(input(\"Ingrese un número entero diferente de cero: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "es_par",
        "kind": 2,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "def es_par(numero):\n    if numero != 0 and numero % 2 == 0:\n        return True\n    else:\n        return False\nnumero_entero = int(input(\"Ingrese un número entero diferente de cero: \"))\nif es_par(numero_entero):\n    print(\"El número\", numero_entero, \"es par.\")\nelse:\n    print(\"El número\", numero_entero, \"no es par o es cero.\")",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "v = int(input())\nprint(\"Ingrese el tiempo en segundos \")\ns = int(input())\ndis = v * s\nprint(\"la distancia:\", dis, \"m\")\n#2.Se necesita obtener el promedio simple de un \n# estudiante a partir de sus tres notas parciales.\nprint(\"Ingrese las tres notas\")\nnot1 = float(input())\nnot2 = float(input())",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "s = int(input())\ndis = v * s\nprint(\"la distancia:\", dis, \"m\")\n#2.Se necesita obtener el promedio simple de un \n# estudiante a partir de sus tres notas parciales.\nprint(\"Ingrese las tres notas\")\nnot1 = float(input())\nnot2 = float(input())\nnot3 = float(input())\ntotal= (not1+not2+not3)/3",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "dis",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "dis = v * s\nprint(\"la distancia:\", dis, \"m\")\n#2.Se necesita obtener el promedio simple de un \n# estudiante a partir de sus tres notas parciales.\nprint(\"Ingrese las tres notas\")\nnot1 = float(input())\nnot2 = float(input())\nnot3 = float(input())\ntotal= (not1+not2+not3)/3\nprint(\"El promedio es: \", total)",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "not1",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "not1 = float(input())\nnot2 = float(input())\nnot3 = float(input())\ntotal= (not1+not2+not3)/3\nprint(\"El promedio es: \", total)\n#3.Elaborar un algoritmo que solicite el número de respuestas correctas, \n# incorrectas y en blanco, correspondientes a postulantes, y muestre su puntaje      \n#final considerando, que por cada respuesta correcta tendrá 4 puntos, \n# respuestas incorrectas tendrá -1 y respuestas en blanco tendrá 0.\nprint(\"Ingrese el número de respuestas correctas:\")",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "not2",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "not2 = float(input())\nnot3 = float(input())\ntotal= (not1+not2+not3)/3\nprint(\"El promedio es: \", total)\n#3.Elaborar un algoritmo que solicite el número de respuestas correctas, \n# incorrectas y en blanco, correspondientes a postulantes, y muestre su puntaje      \n#final considerando, que por cada respuesta correcta tendrá 4 puntos, \n# respuestas incorrectas tendrá -1 y respuestas en blanco tendrá 0.\nprint(\"Ingrese el número de respuestas correctas:\")\ncorrectas = int(input())",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "not3",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "not3 = float(input())\ntotal= (not1+not2+not3)/3\nprint(\"El promedio es: \", total)\n#3.Elaborar un algoritmo que solicite el número de respuestas correctas, \n# incorrectas y en blanco, correspondientes a postulantes, y muestre su puntaje      \n#final considerando, que por cada respuesta correcta tendrá 4 puntos, \n# respuestas incorrectas tendrá -1 y respuestas en blanco tendrá 0.\nprint(\"Ingrese el número de respuestas correctas:\")\ncorrectas = int(input())\nprint(\"Ingrese el número de respuestas incorrectas:\")",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "correctas",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "correctas = int(input())\nprint(\"Ingrese el número de respuestas incorrectas:\")\nincorrectas = int(input())\nprint(\"Ingrese el número de respuestas en blanco:\")\nen_blanco = int(input())\npuntaje = (correctas * 4) + (incorrectas * -1) + (en_blanco * 0)\nprint(\"El puntaje final es:\", puntaje)\n#4.Elaborar un algoritmo que permita ingresar el \n# número de partidos ganados, perdidos y empatados, \n# por algún equipo en el torneo apertura, se debe de mostrar su puntaje total, ",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "incorrectas",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "incorrectas = int(input())\nprint(\"Ingrese el número de respuestas en blanco:\")\nen_blanco = int(input())\npuntaje = (correctas * 4) + (incorrectas * -1) + (en_blanco * 0)\nprint(\"El puntaje final es:\", puntaje)\n#4.Elaborar un algoritmo que permita ingresar el \n# número de partidos ganados, perdidos y empatados, \n# por algún equipo en el torneo apertura, se debe de mostrar su puntaje total, \n# teniendo en cuenta que por cada partido ganador obtendrá 3 puntos, \n# empatado 1 punto y perdido 0 puntos.",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "en_blanco",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "en_blanco = int(input())\npuntaje = (correctas * 4) + (incorrectas * -1) + (en_blanco * 0)\nprint(\"El puntaje final es:\", puntaje)\n#4.Elaborar un algoritmo que permita ingresar el \n# número de partidos ganados, perdidos y empatados, \n# por algún equipo en el torneo apertura, se debe de mostrar su puntaje total, \n# teniendo en cuenta que por cada partido ganador obtendrá 3 puntos, \n# empatado 1 punto y perdido 0 puntos.\nprint(\"Ingrese el numero de partidos ganados\")\npg= int(input())",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "puntaje",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "puntaje = (correctas * 4) + (incorrectas * -1) + (en_blanco * 0)\nprint(\"El puntaje final es:\", puntaje)\n#4.Elaborar un algoritmo que permita ingresar el \n# número de partidos ganados, perdidos y empatados, \n# por algún equipo en el torneo apertura, se debe de mostrar su puntaje total, \n# teniendo en cuenta que por cada partido ganador obtendrá 3 puntos, \n# empatado 1 punto y perdido 0 puntos.\nprint(\"Ingrese el numero de partidos ganados\")\npg= int(input())\nprint(\"Ingrese el numero de partidos empatados\")",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "pe",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "pe = int(input())\nprint(\"Ingrese el numero de partidos perdidos\")\npp = int(input())\nppg = pg * 3\nppe = pe * 1\npt = ppg + ppe\nprint(\"El puntaje total es: \", pt)\n#5.Se requiere el algoritmo para elaborar la planilla de un empleado. \n# Para ello se disponSe requiere el algoritmo para elaborar la planilla de un empleado. Para ello se dispone de sus horas laboradas en el mes, así como de la tarifa por hora.e de sus horas laboradas en el mes, \n# así como de la tarifa por hora.",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "pp",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "pp = int(input())\nppg = pg * 3\nppe = pe * 1\npt = ppg + ppe\nprint(\"El puntaje total es: \", pt)\n#5.Se requiere el algoritmo para elaborar la planilla de un empleado. \n# Para ello se disponSe requiere el algoritmo para elaborar la planilla de un empleado. Para ello se dispone de sus horas laboradas en el mes, así como de la tarifa por hora.e de sus horas laboradas en el mes, \n# así como de la tarifa por hora.\nprint(\"Ingrese sus horas laboradas en el mes:\")\nhlm = int(input())",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "ppg",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "ppg = pg * 3\nppe = pe * 1\npt = ppg + ppe\nprint(\"El puntaje total es: \", pt)\n#5.Se requiere el algoritmo para elaborar la planilla de un empleado. \n# Para ello se disponSe requiere el algoritmo para elaborar la planilla de un empleado. Para ello se dispone de sus horas laboradas en el mes, así como de la tarifa por hora.e de sus horas laboradas en el mes, \n# así como de la tarifa por hora.\nprint(\"Ingrese sus horas laboradas en el mes:\")\nhlm = int(input())\nprint(\"Ingrese la tarifa por hora\")",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "ppe",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "ppe = pe * 1\npt = ppg + ppe\nprint(\"El puntaje total es: \", pt)\n#5.Se requiere el algoritmo para elaborar la planilla de un empleado. \n# Para ello se disponSe requiere el algoritmo para elaborar la planilla de un empleado. Para ello se dispone de sus horas laboradas en el mes, así como de la tarifa por hora.e de sus horas laboradas en el mes, \n# así como de la tarifa por hora.\nprint(\"Ingrese sus horas laboradas en el mes:\")\nhlm = int(input())\nprint(\"Ingrese la tarifa por hora\")\nth = float(input())",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "pt",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "pt = ppg + ppe\nprint(\"El puntaje total es: \", pt)\n#5.Se requiere el algoritmo para elaborar la planilla de un empleado. \n# Para ello se disponSe requiere el algoritmo para elaborar la planilla de un empleado. Para ello se dispone de sus horas laboradas en el mes, así como de la tarifa por hora.e de sus horas laboradas en el mes, \n# así como de la tarifa por hora.\nprint(\"Ingrese sus horas laboradas en el mes:\")\nhlm = int(input())\nprint(\"Ingrese la tarifa por hora\")\nth = float(input())\np = hlm * th",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "hlm",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "hlm = int(input())\nprint(\"Ingrese la tarifa por hora\")\nth = float(input())\np = hlm * th\nprint(\"el total de la planilla es: \", p)\n#6.Elabore un algoritmo que lea los 3 lados de un triángulo cualquiera y \n# calcule su área, considerar: Si A, B y C son los lados, y S el semi perímetro.\nprint(\"Ingrese el lado A\")\nla = int(input())\nprint(\"Ingrese el lado B\")",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "th",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "th = float(input())\np = hlm * th\nprint(\"el total de la planilla es: \", p)\n#6.Elabore un algoritmo que lea los 3 lados de un triángulo cualquiera y \n# calcule su área, considerar: Si A, B y C son los lados, y S el semi perímetro.\nprint(\"Ingrese el lado A\")\nla = int(input())\nprint(\"Ingrese el lado B\")\nlb = int(input())\nprint(\"Ingrese el lado C\")",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "p = hlm * th\nprint(\"el total de la planilla es: \", p)\n#6.Elabore un algoritmo que lea los 3 lados de un triángulo cualquiera y \n# calcule su área, considerar: Si A, B y C son los lados, y S el semi perímetro.\nprint(\"Ingrese el lado A\")\nla = int(input())\nprint(\"Ingrese el lado B\")\nlb = int(input())\nprint(\"Ingrese el lado C\")\nlc = int(input())",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "la",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "la = int(input())\nprint(\"Ingrese el lado B\")\nlb = int(input())\nprint(\"Ingrese el lado C\")\nlc = int(input())\nls = (la+lb+lc)/2\nat = (ls * (ls - la) * (ls - lb) * (ls - lc)) ** 0.5\nprint(\"EL area del triangulo es: \", at)\n#7.Elaborar un algoritmo que permita calcular el número de CDs necesarios \n# para hacer una copia de seguridad, de la información almacenada en un disco cuya capacidad se conoce. ",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "lb",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "lb = int(input())\nprint(\"Ingrese el lado C\")\nlc = int(input())\nls = (la+lb+lc)/2\nat = (ls * (ls - la) * (ls - lb) * (ls - lc)) ** 0.5\nprint(\"EL area del triangulo es: \", at)\n#7.Elaborar un algoritmo que permita calcular el número de CDs necesarios \n# para hacer una copia de seguridad, de la información almacenada en un disco cuya capacidad se conoce. \n# Hay que considerar que el disco duro está lleno de información, además expresado en gigabyte. \n# Un CD virgen tiene 700 Megabytes de capacidad y una Gigabyte es igual a 1,024 megabyte.",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "lc",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "lc = int(input())\nls = (la+lb+lc)/2\nat = (ls * (ls - la) * (ls - lb) * (ls - lc)) ** 0.5\nprint(\"EL area del triangulo es: \", at)\n#7.Elaborar un algoritmo que permita calcular el número de CDs necesarios \n# para hacer una copia de seguridad, de la información almacenada en un disco cuya capacidad se conoce. \n# Hay que considerar que el disco duro está lleno de información, además expresado en gigabyte. \n# Un CD virgen tiene 700 Megabytes de capacidad y una Gigabyte es igual a 1,024 megabyte.\nprint(\"Ingrese la capacidad del disco duro en gigabytes:\")\ncapacidad_disco = int(input())",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "ls",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "ls = (la+lb+lc)/2\nat = (ls * (ls - la) * (ls - lb) * (ls - lc)) ** 0.5\nprint(\"EL area del triangulo es: \", at)\n#7.Elaborar un algoritmo que permita calcular el número de CDs necesarios \n# para hacer una copia de seguridad, de la información almacenada en un disco cuya capacidad se conoce. \n# Hay que considerar que el disco duro está lleno de información, además expresado en gigabyte. \n# Un CD virgen tiene 700 Megabytes de capacidad y una Gigabyte es igual a 1,024 megabyte.\nprint(\"Ingrese la capacidad del disco duro en gigabytes:\")\ncapacidad_disco = int(input())\ncapacidad_cd = 700  ",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "at",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "at = (ls * (ls - la) * (ls - lb) * (ls - lc)) ** 0.5\nprint(\"EL area del triangulo es: \", at)\n#7.Elaborar un algoritmo que permita calcular el número de CDs necesarios \n# para hacer una copia de seguridad, de la información almacenada en un disco cuya capacidad se conoce. \n# Hay que considerar que el disco duro está lleno de información, además expresado en gigabyte. \n# Un CD virgen tiene 700 Megabytes de capacidad y una Gigabyte es igual a 1,024 megabyte.\nprint(\"Ingrese la capacidad del disco duro en gigabytes:\")\ncapacidad_disco = int(input())\ncapacidad_cd = 700  \nmegabytes_por_gigabyte = 1024",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "capacidad_disco",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "capacidad_disco = int(input())\ncapacidad_cd = 700  \nmegabytes_por_gigabyte = 1024\ncapacidad_disco_megabytes = capacidad_disco * megabytes_por_gigabyte\nnum_cds = capacidad_disco_megabytes // capacidad_cd\nprint(\"El número de CDs necesarios es:\", num_cds)\n#8.Se tiene los puntos A y B en el cuadrante positivo del plano cartesiano,\n# elabore el algoritmo que permite obtener la distancia entre A y B.\nprint(\"Ingrese las coordenadas del punto A:\")\nx1 = float(input(\"Ingrese la coordenada x: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "capacidad_cd",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "capacidad_cd = 700  \nmegabytes_por_gigabyte = 1024\ncapacidad_disco_megabytes = capacidad_disco * megabytes_por_gigabyte\nnum_cds = capacidad_disco_megabytes // capacidad_cd\nprint(\"El número de CDs necesarios es:\", num_cds)\n#8.Se tiene los puntos A y B en el cuadrante positivo del plano cartesiano,\n# elabore el algoritmo que permite obtener la distancia entre A y B.\nprint(\"Ingrese las coordenadas del punto A:\")\nx1 = float(input(\"Ingrese la coordenada x: \"))\ny1 = float(input(\"Ingrese la coordenada y: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "megabytes_por_gigabyte",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "megabytes_por_gigabyte = 1024\ncapacidad_disco_megabytes = capacidad_disco * megabytes_por_gigabyte\nnum_cds = capacidad_disco_megabytes // capacidad_cd\nprint(\"El número de CDs necesarios es:\", num_cds)\n#8.Se tiene los puntos A y B en el cuadrante positivo del plano cartesiano,\n# elabore el algoritmo que permite obtener la distancia entre A y B.\nprint(\"Ingrese las coordenadas del punto A:\")\nx1 = float(input(\"Ingrese la coordenada x: \"))\ny1 = float(input(\"Ingrese la coordenada y: \"))\nprint(\"Ingrese las coordenadas del punto B:\")",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "capacidad_disco_megabytes",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "capacidad_disco_megabytes = capacidad_disco * megabytes_por_gigabyte\nnum_cds = capacidad_disco_megabytes // capacidad_cd\nprint(\"El número de CDs necesarios es:\", num_cds)\n#8.Se tiene los puntos A y B en el cuadrante positivo del plano cartesiano,\n# elabore el algoritmo que permite obtener la distancia entre A y B.\nprint(\"Ingrese las coordenadas del punto A:\")\nx1 = float(input(\"Ingrese la coordenada x: \"))\ny1 = float(input(\"Ingrese la coordenada y: \"))\nprint(\"Ingrese las coordenadas del punto B:\")\nx2 = float(input(\"Ingrese la coordenada x: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "num_cds",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "num_cds = capacidad_disco_megabytes // capacidad_cd\nprint(\"El número de CDs necesarios es:\", num_cds)\n#8.Se tiene los puntos A y B en el cuadrante positivo del plano cartesiano,\n# elabore el algoritmo que permite obtener la distancia entre A y B.\nprint(\"Ingrese las coordenadas del punto A:\")\nx1 = float(input(\"Ingrese la coordenada x: \"))\ny1 = float(input(\"Ingrese la coordenada y: \"))\nprint(\"Ingrese las coordenadas del punto B:\")\nx2 = float(input(\"Ingrese la coordenada x: \"))\ny2 = float(input(\"Ingrese la coordenada y: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "x1 = float(input(\"Ingrese la coordenada x: \"))\ny1 = float(input(\"Ingrese la coordenada y: \"))\nprint(\"Ingrese las coordenadas del punto B:\")\nx2 = float(input(\"Ingrese la coordenada x: \"))\ny2 = float(input(\"Ingrese la coordenada y: \"))\ndistancia = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\nprint(\"La distancia entre A y B es:\", distancia)\n#9.Elabora un algoritmo que permita averiguar si #una persona debe sacar su CUIL, sabiendo su año #de nacimiento. El Código Único de Identificación #Laboral (CUIL) es el número que se otorga a todo #trabajador al inicio de su actividad laboral en #relación de dependencia (mayores de 17 años) que #pertenezca al Sistema Integrado de Jubilaciones y #Pensiones (SIJP), y a toda otra persona que #gestione alguna prestación o servicio de la #Seguridad Social en la República Argentina.\ndef verificar_cuil(año_nacimiento, año_actual):\n    edad = año_actual - año_nacimiento",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "y1",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "y1 = float(input(\"Ingrese la coordenada y: \"))\nprint(\"Ingrese las coordenadas del punto B:\")\nx2 = float(input(\"Ingrese la coordenada x: \"))\ny2 = float(input(\"Ingrese la coordenada y: \"))\ndistancia = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\nprint(\"La distancia entre A y B es:\", distancia)\n#9.Elabora un algoritmo que permita averiguar si #una persona debe sacar su CUIL, sabiendo su año #de nacimiento. El Código Único de Identificación #Laboral (CUIL) es el número que se otorga a todo #trabajador al inicio de su actividad laboral en #relación de dependencia (mayores de 17 años) que #pertenezca al Sistema Integrado de Jubilaciones y #Pensiones (SIJP), y a toda otra persona que #gestione alguna prestación o servicio de la #Seguridad Social en la República Argentina.\ndef verificar_cuil(año_nacimiento, año_actual):\n    edad = año_actual - año_nacimiento\n    if edad > 17:",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "x2 = float(input(\"Ingrese la coordenada x: \"))\ny2 = float(input(\"Ingrese la coordenada y: \"))\ndistancia = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\nprint(\"La distancia entre A y B es:\", distancia)\n#9.Elabora un algoritmo que permita averiguar si #una persona debe sacar su CUIL, sabiendo su año #de nacimiento. El Código Único de Identificación #Laboral (CUIL) es el número que se otorga a todo #trabajador al inicio de su actividad laboral en #relación de dependencia (mayores de 17 años) que #pertenezca al Sistema Integrado de Jubilaciones y #Pensiones (SIJP), y a toda otra persona que #gestione alguna prestación o servicio de la #Seguridad Social en la República Argentina.\ndef verificar_cuil(año_nacimiento, año_actual):\n    edad = año_actual - año_nacimiento\n    if edad > 17:\n        return \"Debe solicitar su CUIL.\"\n    else:",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "y2",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "y2 = float(input(\"Ingrese la coordenada y: \"))\ndistancia = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\nprint(\"La distancia entre A y B es:\", distancia)\n#9.Elabora un algoritmo que permita averiguar si #una persona debe sacar su CUIL, sabiendo su año #de nacimiento. El Código Único de Identificación #Laboral (CUIL) es el número que se otorga a todo #trabajador al inicio de su actividad laboral en #relación de dependencia (mayores de 17 años) que #pertenezca al Sistema Integrado de Jubilaciones y #Pensiones (SIJP), y a toda otra persona que #gestione alguna prestación o servicio de la #Seguridad Social en la República Argentina.\ndef verificar_cuil(año_nacimiento, año_actual):\n    edad = año_actual - año_nacimiento\n    if edad > 17:\n        return \"Debe solicitar su CUIL.\"\n    else:\n        return \"No debe solicitar su CUIL aún.\"",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "distancia",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "distancia = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\nprint(\"La distancia entre A y B es:\", distancia)\n#9.Elabora un algoritmo que permita averiguar si #una persona debe sacar su CUIL, sabiendo su año #de nacimiento. El Código Único de Identificación #Laboral (CUIL) es el número que se otorga a todo #trabajador al inicio de su actividad laboral en #relación de dependencia (mayores de 17 años) que #pertenezca al Sistema Integrado de Jubilaciones y #Pensiones (SIJP), y a toda otra persona que #gestione alguna prestación o servicio de la #Seguridad Social en la República Argentina.\ndef verificar_cuil(año_nacimiento, año_actual):\n    edad = año_actual - año_nacimiento\n    if edad > 17:\n        return \"Debe solicitar su CUIL.\"\n    else:\n        return \"No debe solicitar su CUIL aún.\"\naño_nacimiento = int(input(\"Ingrese su año de nacimiento: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "año_nacimiento",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "año_nacimiento = int(input(\"Ingrese su año de nacimiento: \"))\naño_actual = int(input(\"Ingrese el año actual: \"))\nresultado = verificar_cuil(año_nacimiento, año_actual)\nprint(resultado)\n#10.Elabora un algoritmo que solicite la edad de #2 hermanos y muestre un mensaje indicando la edad #del mayor y cuantos años de diferencia tiene con #el menor.\ndef diferencia_edades(edad_hermano1, edad_hermano2):\n    if edad_hermano1 > edad_hermano2:\n        print(\"El Primer Hermano es el Mayor por\", edad_hermano1 - edad_hermano2, \"años.\")\n    else:\n        print(\"El Segundo Hermano es el Mayor por\", edad_hermano2 - edad_hermano1, \"años.\")",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "año_actual",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "año_actual = int(input(\"Ingrese el año actual: \"))\nresultado = verificar_cuil(año_nacimiento, año_actual)\nprint(resultado)\n#10.Elabora un algoritmo que solicite la edad de #2 hermanos y muestre un mensaje indicando la edad #del mayor y cuantos años de diferencia tiene con #el menor.\ndef diferencia_edades(edad_hermano1, edad_hermano2):\n    if edad_hermano1 > edad_hermano2:\n        print(\"El Primer Hermano es el Mayor por\", edad_hermano1 - edad_hermano2, \"años.\")\n    else:\n        print(\"El Segundo Hermano es el Mayor por\", edad_hermano2 - edad_hermano1, \"años.\")\nedad_hermano1 = int(input(\"Ingrese la edad del Primer Hermano: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "resultado = verificar_cuil(año_nacimiento, año_actual)\nprint(resultado)\n#10.Elabora un algoritmo que solicite la edad de #2 hermanos y muestre un mensaje indicando la edad #del mayor y cuantos años de diferencia tiene con #el menor.\ndef diferencia_edades(edad_hermano1, edad_hermano2):\n    if edad_hermano1 > edad_hermano2:\n        print(\"El Primer Hermano es el Mayor por\", edad_hermano1 - edad_hermano2, \"años.\")\n    else:\n        print(\"El Segundo Hermano es el Mayor por\", edad_hermano2 - edad_hermano1, \"años.\")\nedad_hermano1 = int(input(\"Ingrese la edad del Primer Hermano: \"))\nedad_hermano2 = int(input(\"Ingrese la edad del Segundo Hermano: \"))",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "edad_hermano1",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "edad_hermano1 = int(input(\"Ingrese la edad del Primer Hermano: \"))\nedad_hermano2 = int(input(\"Ingrese la edad del Segundo Hermano: \"))\ndiferencia_edades(edad_hermano1, edad_hermano2)\n#11.\tSe tiene registrado la producción (unidades) #logradas por un operario a lo largo de la semana #(lunes a sábado). Elabore un algoritmo que nos #muestre o nos diga si el operario recibirá #incentivos sabiendo que el promedio de producción #mínima es de 100 unidades.\ndef verificar_incentivos(produccion_semanal):\n    promedio_produccion = sum(produccion_semanal) / len(produccion_semanal) #para obtener la longitud de un objeto, se usa para contar el número de elementos de una lista\n    if promedio_produccion >= 100:\n        return \"El operario recibirá incentivos.\"\n    else:\n        return \"El operario no recibirá incentivos.\"",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "edad_hermano2",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "edad_hermano2 = int(input(\"Ingrese la edad del Segundo Hermano: \"))\ndiferencia_edades(edad_hermano1, edad_hermano2)\n#11.\tSe tiene registrado la producción (unidades) #logradas por un operario a lo largo de la semana #(lunes a sábado). Elabore un algoritmo que nos #muestre o nos diga si el operario recibirá #incentivos sabiendo que el promedio de producción #mínima es de 100 unidades.\ndef verificar_incentivos(produccion_semanal):\n    promedio_produccion = sum(produccion_semanal) / len(produccion_semanal) #para obtener la longitud de un objeto, se usa para contar el número de elementos de una lista\n    if promedio_produccion >= 100:\n        return \"El operario recibirá incentivos.\"\n    else:\n        return \"El operario no recibirá incentivos.\"\nproduccion_semanal = []",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "produccion_semanal",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "produccion_semanal = []\nprint(\"Ingrese la producción diaria del operario de lunes a sábado:\")\nfor i in range(6):\n    produccion_diaria = int(input(\"Ingrese la producción del día {}: \".format(i+1)))\n    produccion_semanal.append(produccion_diaria)\nresultado = verificar_incentivos(produccion_semanal)\nprint(resultado)\n#----- otra forma -------\ndef calcular_incentivos(produccion_semana):\n    produccion_total = sum(produccion_semana)",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "resultado = verificar_incentivos(produccion_semanal)\nprint(resultado)\n#----- otra forma -------\ndef calcular_incentivos(produccion_semana):\n    produccion_total = sum(produccion_semana)\n    produccion_promedio = produccion_total / len(produccion_semana)\n    if produccion_promedio >= 100:\n        return \"Recibirá Incentivos\"\n    else:\n        return \"No Recibirá Incentivos\"",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "produccion_lunes",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "produccion_lunes = int(input(\"Producción del día Lunes: \"))\nproduccion_martes = int(input(\"Producción del día Martes: \"))\nproduccion_miercoles = int(input(\"Producción del día Miércoles: \"))\nproduccion_jueves = int(input(\"Producción del día Jueves: \"))\nproduccion_viernes = int(input(\"Producción del día Viernes: \"))\nproduccion_sabado = int(input(\"Producción del día Sábado: \"))\nproduccion_semana = [produccion_lunes, produccion_martes, produccion_miercoles, produccion_jueves, produccion_viernes, produccion_sabado]\nmensaje_incentivos = calcular_incentivos(produccion_semana)\nprint(mensaje_incentivos)\n#12.\tElabora un algoritmo para leer 3 números #enteros diferentes entre sí, y determinar el #número mayor de los tres.",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "produccion_martes",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "produccion_martes = int(input(\"Producción del día Martes: \"))\nproduccion_miercoles = int(input(\"Producción del día Miércoles: \"))\nproduccion_jueves = int(input(\"Producción del día Jueves: \"))\nproduccion_viernes = int(input(\"Producción del día Viernes: \"))\nproduccion_sabado = int(input(\"Producción del día Sábado: \"))\nproduccion_semana = [produccion_lunes, produccion_martes, produccion_miercoles, produccion_jueves, produccion_viernes, produccion_sabado]\nmensaje_incentivos = calcular_incentivos(produccion_semana)\nprint(mensaje_incentivos)\n#12.\tElabora un algoritmo para leer 3 números #enteros diferentes entre sí, y determinar el #número mayor de los tres.\ndef encontrar_mayor(n1, n2, n3):",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "produccion_miercoles",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "produccion_miercoles = int(input(\"Producción del día Miércoles: \"))\nproduccion_jueves = int(input(\"Producción del día Jueves: \"))\nproduccion_viernes = int(input(\"Producción del día Viernes: \"))\nproduccion_sabado = int(input(\"Producción del día Sábado: \"))\nproduccion_semana = [produccion_lunes, produccion_martes, produccion_miercoles, produccion_jueves, produccion_viernes, produccion_sabado]\nmensaje_incentivos = calcular_incentivos(produccion_semana)\nprint(mensaje_incentivos)\n#12.\tElabora un algoritmo para leer 3 números #enteros diferentes entre sí, y determinar el #número mayor de los tres.\ndef encontrar_mayor(n1, n2, n3):\n    if n1 > n2 and n1 > n3:",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "produccion_jueves",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "produccion_jueves = int(input(\"Producción del día Jueves: \"))\nproduccion_viernes = int(input(\"Producción del día Viernes: \"))\nproduccion_sabado = int(input(\"Producción del día Sábado: \"))\nproduccion_semana = [produccion_lunes, produccion_martes, produccion_miercoles, produccion_jueves, produccion_viernes, produccion_sabado]\nmensaje_incentivos = calcular_incentivos(produccion_semana)\nprint(mensaje_incentivos)\n#12.\tElabora un algoritmo para leer 3 números #enteros diferentes entre sí, y determinar el #número mayor de los tres.\ndef encontrar_mayor(n1, n2, n3):\n    if n1 > n2 and n1 > n3:\n        return n1",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "produccion_viernes",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "produccion_viernes = int(input(\"Producción del día Viernes: \"))\nproduccion_sabado = int(input(\"Producción del día Sábado: \"))\nproduccion_semana = [produccion_lunes, produccion_martes, produccion_miercoles, produccion_jueves, produccion_viernes, produccion_sabado]\nmensaje_incentivos = calcular_incentivos(produccion_semana)\nprint(mensaje_incentivos)\n#12.\tElabora un algoritmo para leer 3 números #enteros diferentes entre sí, y determinar el #número mayor de los tres.\ndef encontrar_mayor(n1, n2, n3):\n    if n1 > n2 and n1 > n3:\n        return n1\n    elif n2 > n3:",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "produccion_sabado",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "produccion_sabado = int(input(\"Producción del día Sábado: \"))\nproduccion_semana = [produccion_lunes, produccion_martes, produccion_miercoles, produccion_jueves, produccion_viernes, produccion_sabado]\nmensaje_incentivos = calcular_incentivos(produccion_semana)\nprint(mensaje_incentivos)\n#12.\tElabora un algoritmo para leer 3 números #enteros diferentes entre sí, y determinar el #número mayor de los tres.\ndef encontrar_mayor(n1, n2, n3):\n    if n1 > n2 and n1 > n3:\n        return n1\n    elif n2 > n3:\n        return n2",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "produccion_semana",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "produccion_semana = [produccion_lunes, produccion_martes, produccion_miercoles, produccion_jueves, produccion_viernes, produccion_sabado]\nmensaje_incentivos = calcular_incentivos(produccion_semana)\nprint(mensaje_incentivos)\n#12.\tElabora un algoritmo para leer 3 números #enteros diferentes entre sí, y determinar el #número mayor de los tres.\ndef encontrar_mayor(n1, n2, n3):\n    if n1 > n2 and n1 > n3:\n        return n1\n    elif n2 > n3:\n        return n2\n    else:",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "mensaje_incentivos",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "mensaje_incentivos = calcular_incentivos(produccion_semana)\nprint(mensaje_incentivos)\n#12.\tElabora un algoritmo para leer 3 números #enteros diferentes entre sí, y determinar el #número mayor de los tres.\ndef encontrar_mayor(n1, n2, n3):\n    if n1 > n2 and n1 > n3:\n        return n1\n    elif n2 > n3:\n        return n2\n    else:\n        return n3",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "n1 = int(input(\"Ingrese el primer número entero: \"))\nn2 = int(input(\"Ingrese el segundo número entero: \"))\nn3 = int(input(\"Ingrese el tercer número entero: \"))\nnumero_mayor = encontrar_mayor(n1, n2, n3)\nprint(\"El número mayor es:\", numero_mayor)\n#13.\tElabora un algoritmo que sirva para #identificar el tipo de triangulo conociendo sus #tres lados.\ndef tipo_triangulo(lado1, lado2, lado3):\n    if lado1 == lado2 == lado3:\n        return \"Equilátero\"\n    elif lado1 == lado2 or lado1 == lado3 or lado2 == lado3:",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "n2 = int(input(\"Ingrese el segundo número entero: \"))\nn3 = int(input(\"Ingrese el tercer número entero: \"))\nnumero_mayor = encontrar_mayor(n1, n2, n3)\nprint(\"El número mayor es:\", numero_mayor)\n#13.\tElabora un algoritmo que sirva para #identificar el tipo de triangulo conociendo sus #tres lados.\ndef tipo_triangulo(lado1, lado2, lado3):\n    if lado1 == lado2 == lado3:\n        return \"Equilátero\"\n    elif lado1 == lado2 or lado1 == lado3 or lado2 == lado3:\n        return \"Isósceles\"",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "n3",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "n3 = int(input(\"Ingrese el tercer número entero: \"))\nnumero_mayor = encontrar_mayor(n1, n2, n3)\nprint(\"El número mayor es:\", numero_mayor)\n#13.\tElabora un algoritmo que sirva para #identificar el tipo de triangulo conociendo sus #tres lados.\ndef tipo_triangulo(lado1, lado2, lado3):\n    if lado1 == lado2 == lado3:\n        return \"Equilátero\"\n    elif lado1 == lado2 or lado1 == lado3 or lado2 == lado3:\n        return \"Isósceles\"\n    else:",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "numero_mayor",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "numero_mayor = encontrar_mayor(n1, n2, n3)\nprint(\"El número mayor es:\", numero_mayor)\n#13.\tElabora un algoritmo que sirva para #identificar el tipo de triangulo conociendo sus #tres lados.\ndef tipo_triangulo(lado1, lado2, lado3):\n    if lado1 == lado2 == lado3:\n        return \"Equilátero\"\n    elif lado1 == lado2 or lado1 == lado3 or lado2 == lado3:\n        return \"Isósceles\"\n    else:\n        return \"Escaleno\"",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "lado1",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "lado1 = float(input(\"Ingrese la longitud del primer lado del triángulo: \"))\nlado2 = float(input(\"Ingrese la longitud del segundo lado del triángulo: \"))\nlado3 = float(input(\"Ingrese la longitud del tercer lado del triángulo: \"))\ntipo = tipo_triangulo(lado1, lado2, lado3)\nprint(\"El triángulo es de tipo:\", tipo)\n#14.\tElabore un algoritmo que permita ingresar un #número entero (1 a 10), y muestre su equivalente #en romano.\ndef convertir_a_romano(numero_entero):\n    romanos = {\n        1: \"I\",\n        2: \"II\",",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "lado2",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "lado2 = float(input(\"Ingrese la longitud del segundo lado del triángulo: \"))\nlado3 = float(input(\"Ingrese la longitud del tercer lado del triángulo: \"))\ntipo = tipo_triangulo(lado1, lado2, lado3)\nprint(\"El triángulo es de tipo:\", tipo)\n#14.\tElabore un algoritmo que permita ingresar un #número entero (1 a 10), y muestre su equivalente #en romano.\ndef convertir_a_romano(numero_entero):\n    romanos = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "lado3",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "lado3 = float(input(\"Ingrese la longitud del tercer lado del triángulo: \"))\ntipo = tipo_triangulo(lado1, lado2, lado3)\nprint(\"El triángulo es de tipo:\", tipo)\n#14.\tElabore un algoritmo que permita ingresar un #número entero (1 a 10), y muestre su equivalente #en romano.\ndef convertir_a_romano(numero_entero):\n    romanos = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "tipo",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "tipo = tipo_triangulo(lado1, lado2, lado3)\nprint(\"El triángulo es de tipo:\", tipo)\n#14.\tElabore un algoritmo que permita ingresar un #número entero (1 a 10), y muestre su equivalente #en romano.\ndef convertir_a_romano(numero_entero):\n    romanos = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",\n        5: \"V\",",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "numero_entero",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "numero_entero = int(input(\"Ingrese un número entero entre 1 y 10: \"))\nequivalente_romano = convertir_a_romano(numero_entero)\nprint(\"El equivalente en romano es:\", equivalente_romano)\n#15.\tElabore un algoritmo que permita ingresar el #monto de venta alcanzado por un vendedor durante #el mes, luego de calcular la bonificación que le #corresponde sabiendo:\ndef calcular_bonificacion(monto_venta):\n    if monto_venta <= 1000:\n        bonificacion = 0\n    elif monto_venta <= 5000:\n        bonificacion = 3\n    elif monto_venta <= 20000:",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "equivalente_romano",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "equivalente_romano = convertir_a_romano(numero_entero)\nprint(\"El equivalente en romano es:\", equivalente_romano)\n#15.\tElabore un algoritmo que permita ingresar el #monto de venta alcanzado por un vendedor durante #el mes, luego de calcular la bonificación que le #corresponde sabiendo:\ndef calcular_bonificacion(monto_venta):\n    if monto_venta <= 1000:\n        bonificacion = 0\n    elif monto_venta <= 5000:\n        bonificacion = 3\n    elif monto_venta <= 20000:\n        bonificacion = 5",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "monto_venta",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "monto_venta = float(input(\"Ingrese el monto de venta alcanzado por el vendedor durante el mes: \"))\nbonificacion = calcular_bonificacion(monto_venta)\nprint(\"La bonificación correspondiente es:\", bonificacion)\n#------ otra forma con diccionario-------\ndef calcular_bonificacion(monto_venta):\n    bonificaciones = {\n        range(0, 1000): 0,\n        range(1000, 5000): 3,\n        range(5000, 20000): 5,\n        range(20000, float('inf')): 8",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "bonificacion",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "bonificacion = calcular_bonificacion(monto_venta)\nprint(\"La bonificación correspondiente es:\", bonificacion)\n#------ otra forma con diccionario-------\ndef calcular_bonificacion(monto_venta):\n    bonificaciones = {\n        range(0, 1000): 0,\n        range(1000, 5000): 3,\n        range(5000, 20000): 5,\n        range(20000, float('inf')): 8\n    }",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "monto_venta",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "monto_venta = float(input(\"Ingrese el monto de venta alcanzado por el vendedor durante el mes: \"))\ntotal_bonificacion = calcular_bonificacion(monto_venta)\nprint(\"La bonificación correspondiente es:\", total_bonificacion)\n#16.\tElabore un algoritmo que solicite un número #entero y muestre un mensaje indicando la vocal #correspondiente, considerando que la vocal A = 1.\ndef obtener_vocal(numero):\n    switch = {\n        1: \"A\",\n        2: \"E\",\n        3: \"I\",\n        4: \"O\",",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "total_bonificacion",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "total_bonificacion = calcular_bonificacion(monto_venta)\nprint(\"La bonificación correspondiente es:\", total_bonificacion)\n#16.\tElabore un algoritmo que solicite un número #entero y muestre un mensaje indicando la vocal #correspondiente, considerando que la vocal A = 1.\ndef obtener_vocal(numero):\n    switch = {\n        1: \"A\",\n        2: \"E\",\n        3: \"I\",\n        4: \"O\",\n        5: \"U\"",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "numero_entero",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "numero_entero = int(input(\"Ingrese un número entero del 1 al 5: \"))\nvocal_correspondiente = obtener_vocal(numero_entero)\nprint(\"La vocal correspondiente es:\", vocal_correspondiente)\n#---otra vez con diccionario------\ndef obtener_vocal(numero):\n    vocales = {\n        1: \"A\",\n        2: \"E\",\n        3: \"I\",\n        4: \"O\",",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "vocal_correspondiente",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "vocal_correspondiente = obtener_vocal(numero_entero)\nprint(\"La vocal correspondiente es:\", vocal_correspondiente)\n#---otra vez con diccionario------\ndef obtener_vocal(numero):\n    vocales = {\n        1: \"A\",\n        2: \"E\",\n        3: \"I\",\n        4: \"O\",\n        5: \"U\"",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "numero_entero",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "numero_entero = int(input(\"Ingrese un número entero del 1 al 5: \"))\nvocal_correspondiente = obtener_vocal(numero_entero)\nprint(\"La vocal correspondiente es:\", vocal_correspondiente)\n#17.\tSe desea leer un número entero de 2 cifras y \n# #que se muestre el número de unidades, decenas que #lo componen.\ndef obtener_unidades_y_decenas(numero):\n    unidades = numero % 10\n    decenas = numero // 10\n    return unidades, decenas\ndef es_par(numero):",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "vocal_correspondiente",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "vocal_correspondiente = obtener_vocal(numero_entero)\nprint(\"La vocal correspondiente es:\", vocal_correspondiente)\n#17.\tSe desea leer un número entero de 2 cifras y \n# #que se muestre el número de unidades, decenas que #lo componen.\ndef obtener_unidades_y_decenas(numero):\n    unidades = numero % 10\n    decenas = numero // 10\n    return unidades, decenas\ndef es_par(numero):\n    if numero != 0 and numero % 2 == 0:",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "numero_entero",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "numero_entero = int(input(\"Ingrese un número entero diferente de cero: \"))\nif es_par(numero_entero):\n    print(\"El número\", numero_entero, \"es par.\")\nelse:\n    print(\"El número\", numero_entero, \"no es par o es cero.\")\n#19.\tElabore un algoritmo que contenga los número #pares del 1 al 10\nprint(\"Números pares del 1 al 10:\")\nnumero = 2\nprint(numero)\nfor k in range(1, 5):",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "numero",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "numero = 2\nprint(numero)\nfor k in range(1, 5):\n    numero += 2\n    print(numero)\n#20.\tElaborar un algoritmo que permita mostrar el #sueldo promedio de un grupo de empleados.\nnumero_empleados = int(input(\"Ingrese el número de empleados: \"))\nsuma_sueldos = 0\nif es_par(numero_entero):\n    print(\"El número\", numero_entero, \"es par.\")",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "numero_empleados",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "numero_empleados = int(input(\"Ingrese el número de empleados: \"))\nsuma_sueldos = 0\nif es_par(numero_entero):\n    print(\"El número\", numero_entero, \"es par.\")\nfor k in range(1, numero_empleados + 1):\n    sueldo_empleado = float(input(f\"Ingrese el sueldo del empleado {k}: \"))\n    suma_sueldos += sueldo_empleado\nsueldo_promedio = suma_sueldos / numero_empleados\nprint(\"El sueldo promedio del grupo de empleados es:\", sueldo_promedio)\n#21.\tElaborar un algoritmo que solicite la edad de #200 personas, y que muestre cuantos son mayores y #menores de edad hay",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "suma_sueldos",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "suma_sueldos = 0\nif es_par(numero_entero):\n    print(\"El número\", numero_entero, \"es par.\")\nfor k in range(1, numero_empleados + 1):\n    sueldo_empleado = float(input(f\"Ingrese el sueldo del empleado {k}: \"))\n    suma_sueldos += sueldo_empleado\nsueldo_promedio = suma_sueldos / numero_empleados\nprint(\"El sueldo promedio del grupo de empleados es:\", sueldo_promedio)\n#21.\tElaborar un algoritmo que solicite la edad de #200 personas, y que muestre cuantos son mayores y #menores de edad hay\nmayores = 0",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "sueldo_promedio",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "sueldo_promedio = suma_sueldos / numero_empleados\nprint(\"El sueldo promedio del grupo de empleados es:\", sueldo_promedio)\n#21.\tElaborar un algoritmo que solicite la edad de #200 personas, y que muestre cuantos son mayores y #menores de edad hay\nmayores = 0\nmenores = 0\nfor k in range(1, 201):\n    edad_persona = int(input(f\"Ingrese la edad de la persona {k}: \"))\n    if edad_persona < 18:\n        menores += 1\n    else:",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "mayores",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "mayores = 0\nmenores = 0\nfor k in range(1, 201):\n    edad_persona = int(input(f\"Ingrese la edad de la persona {k}: \"))\n    if edad_persona < 18:\n        menores += 1\n    else:\n        mayores += 1\nprint(\"Cantidad de personas mayores de edad:\", mayores)\nprint(\"Cantidad de personas menores de edad:\", menores)",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "menores",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "menores = 0\nfor k in range(1, 201):\n    edad_persona = int(input(f\"Ingrese la edad de la persona {k}: \"))\n    if edad_persona < 18:\n        menores += 1\n    else:\n        mayores += 1\nprint(\"Cantidad de personas mayores de edad:\", mayores)\nprint(\"Cantidad de personas menores de edad:\", menores)\n#22.\tElaborar un algoritmo que solicite 2 número #enteros y muestre su producto por el método de #sumas sucesivas.",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "primer_numero",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "primer_numero = int(input(\"Ingrese el primer número entero: \"))\nsegundo_numero = int(input(\"Ingrese el segundo número entero: \"))\nproducto = 0\nfor k in range(1, segundo_numero + 1):\n    producto += primer_numero\nprint(\"El producto de\", primer_numero, \"y\", segundo_numero, \"es:\", producto)\n#23.\tElaborar un algoritmo que muestre 10 números #enteros a partir de 1 excepto los pares.\nfor k in range(1, 11):\n    if k % 2 != 0:\n        print(k)",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "segundo_numero",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "segundo_numero = int(input(\"Ingrese el segundo número entero: \"))\nproducto = 0\nfor k in range(1, segundo_numero + 1):\n    producto += primer_numero\nprint(\"El producto de\", primer_numero, \"y\", segundo_numero, \"es:\", producto)\n#23.\tElaborar un algoritmo que muestre 10 números #enteros a partir de 1 excepto los pares.\nfor k in range(1, 11):\n    if k % 2 != 0:\n        print(k)\n#24.\tElabore un algoritmo que muestre los términos de la serie que sean menores a 1000.",
        "detail": "ejercicios32",
        "documentation": {}
    },
    {
        "label": "producto",
        "kind": 5,
        "importPath": "ejercicios32",
        "description": "ejercicios32",
        "peekOfCode": "producto = 0\nfor k in range(1, segundo_numero + 1):\n    producto += primer_numero\nprint(\"El producto de\", primer_numero, \"y\", segundo_numero, \"es:\", producto)\n#23.\tElaborar un algoritmo que muestre 10 números #enteros a partir de 1 excepto los pares.\nfor k in range(1, 11):\n    if k % 2 != 0:\n        print(k)\n#24.\tElabore un algoritmo que muestre los términos de la serie que sean menores a 1000.",
        "detail": "ejercicios32",
        "documentation": {}
    }
]